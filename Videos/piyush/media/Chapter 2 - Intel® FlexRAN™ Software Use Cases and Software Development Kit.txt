WEBVTT

00:00:00.900 --> 00:00:04.767
Hello and welcome back to the
vRAN Software course.

00:00:04.800 --> 00:00:07.133
This section will continue
our discussion

00:00:07.133 --> 00:00:09.700
of the
FlexRAN Reference Architecture

00:00:09.700 --> 00:00:12.567
and look at some use cases
or consumption models

00:00:12.600 --> 00:00:14.600
for the FlexRAN software

00:00:14.600 --> 00:00:17.167
as well as the
Software Development Kit.

00:00:17.467 --> 00:00:19.833
Here we see a representation

00:00:19.833 --> 00:00:22.400
of the vRAN software
and hardware stack

00:00:22.400 --> 00:00:26.200
enabled by the
Intel FlexRAN Reference Architecture.

00:00:27.600 --> 00:00:31.667
The diagram shows the building blocks
which support FlexRAN,

00:00:31.700 --> 00:00:34.967
such as DPDK and Kubernetes,

00:00:35.700 --> 00:00:37.733
as well as the
commercial software layers

00:00:37.733 --> 00:00:39.933
that run on top of FlexRAN

00:00:39.933 --> 00:00:43.133
to form the
commercial implementation.

00:00:43.133 --> 00:00:44.900
While the FlexRAN software

00:00:44.900 --> 00:00:48.333
is only one small part
of this software ecosystem,

00:00:48.333 --> 00:00:52.033
Intel contributes to all
of these open-source projects

00:00:52.033 --> 00:00:55.900
to optimize across the stack
to help the wider ecosystem.

00:00:55.900 --> 00:01:00.900
For example,
the xRAN Library for O-RAN 7.2 split

00:01:00.933 --> 00:01:04.633
was contributed by Intel
to the O-RAN source code.

00:01:04.667 --> 00:01:08.633
Additionally, the FlexRAN software
source code is released

00:01:08.633 --> 00:01:12.367
under Intel architecture license
free of charge.

00:01:12.400 --> 00:01:15.100
Part of the flexibility of
FlexRAN software

00:01:15.100 --> 00:01:17.267
is the different ways
it can be consumed

00:01:17.267 --> 00:01:20.533
when developing
a commercial vRAN implementation.

00:01:21.400 --> 00:01:22.767
The first use case

00:01:22.767 --> 00:01:25.567
is where a customer
would like to use FlexRAN

00:01:25.567 --> 00:01:27.433
as a complete Reference Architecture

00:01:27.433 --> 00:01:29.567
where they can build upon that,

00:01:29.567 --> 00:01:33.100
commercialize,
and get to market quickly.

00:01:33.500 --> 00:01:35.533
The second use case is

00:01:35.533 --> 00:01:37.567
where a software
developer would consume

00:01:37.567 --> 00:01:42.867
only some of the SDKs or modules
to augment their own IP.

00:01:42.967 --> 00:01:46.433
This can help them
to improve their overall performance

00:01:46.500 --> 00:01:49.533
and quickly ramp up new features.

00:01:50.533 --> 00:01:53.433
The last type of use case is one
where developers

00:01:53.433 --> 00:01:57.233
are more focused
on research and benchmarking.

00:01:57.300 --> 00:01:59.967
Being a complete
software implementation,

00:01:59.967 --> 00:02:03.433
it is easy to modify
and add new features

00:02:03.433 --> 00:02:06.967
or prototype new algorithms
or designs much quicker

00:02:06.967 --> 00:02:11.067
than one could if using a
hardware-based DU solution.

00:02:11.167 --> 00:02:14.700
The FlexRAN software is built
around flexibility,

00:02:14.700 --> 00:02:18.000
which is why Intel offers
these different consumption models

00:02:18.000 --> 00:02:21.267
as well as the
Software Development Kits.

00:02:21.300 --> 00:02:23.500
We mentioned them briefly before,

00:02:23.500 --> 00:02:27.800
but now let's dive
a bit deeper on the SDKs.

00:02:28.167 --> 00:02:29.767
The Software Development Kits

00:02:29.767 --> 00:02:33.300
are packaged modularly
so that they can be used

00:02:33.300 --> 00:02:38.400
as part of the overall solution
or taken independently.

00:02:38.467 --> 00:02:43.533
The first module is the Layer
1 SDK (L1 SDK).

00:02:43.600 --> 00:02:46.533
This provides
the fundamental algorithms used

00:02:46.533 --> 00:02:49.600
in the physical layer
processing of the DU,

00:02:49.633 --> 00:02:50.900
from simple functions

00:02:50.900 --> 00:02:54.167
like complex
multiplication and matrix inversions

00:02:54.167 --> 00:02:55.967
to more complete algorithms

00:02:55.967 --> 00:02:59.733
like Channel Estimation,
Equalization, and precoding,

00:02:59.733 --> 00:03:02.767
all contained in this module.

00:03:02.867 --> 00:03:04.333
Each of these functions

00:03:04.333 --> 00:03:06.000
have been highly optimized

00:03:06.000 --> 00:03:08.633
for the Intel x86 instruction set

00:03:08.633 --> 00:03:12.167
using Intel Advanced
Vector Extensions 512,

00:03:12.167 --> 00:03:14.333
or IntelÂ® AVX-512,

00:03:14.333 --> 00:03:19.067
instructions to deliver outstanding
performance for DU workloads.

00:03:19.200 --> 00:03:22.900
We'll look at this SDK
a bit closer later.

00:03:23.000 --> 00:03:26.767
The second module
is the BBU Pooling SDK.

00:03:26.867 --> 00:03:28.867
This is the software architecture

00:03:28.867 --> 00:03:31.267
that is used in the reference stack,

00:03:31.300 --> 00:03:34.367
a framework that allows
the developer to distribute

00:03:34.367 --> 00:03:38.367
processing workloads
across any number of CPU cores.

00:03:38.433 --> 00:03:40.700
This is a key component that allows

00:03:40.700 --> 00:03:42.933
the FlexRAN reference stack to share

00:03:42.933 --> 00:03:48.200
the compute resources of the Intel
Xeon CPU between multiple cells

00:03:48.200 --> 00:03:52.800
and deliver on the promise of Cloud
Native vRAN pooling gains.

00:03:52.900 --> 00:03:55.033
The O-RAN Fronthaul SDK

00:03:55.033 --> 00:03:59.867
is a library that helps frame
the O-RAN 7.2 Split packets

00:03:59.867 --> 00:04:03.500
that will be sent to the Radio
Unit, or RU.

00:04:03.567 --> 00:04:07.267
This library also provides the timing
and synchronization

00:04:07.267 --> 00:04:10.500
to the
FlexRAN Reference Architecture.

00:04:10.633 --> 00:04:13.700
The Layer 2 SDK (L2 SDK)

00:04:13.733 --> 00:04:17.700
includes some reference function
similar to the Layer 1 SDK

00:04:17.700 --> 00:04:20.200
on how to optimize
the Layer 2 functions

00:04:20.200 --> 00:04:23.467
for IntelÂ® AVX-512 instructions.

00:04:24.633 --> 00:04:27.467
MLOG Library is a unique library

00:04:27.467 --> 00:04:30.033
included in
the FlexRAN reference stack

00:04:30.033 --> 00:04:31.433
that allows a developer

00:04:31.433 --> 00:04:34.500
to capture processing latency
for specific functions

00:04:34.500 --> 00:04:36.900
executing in the
Reference Architecture

00:04:36.900 --> 00:04:39.433
and display them on a time graph

00:04:39.433 --> 00:04:44.800
to help debug and investigate
the FlexRANâ„¢ Reference Architecture.

00:04:45.033 --> 00:04:49.967
The last component is actually
an open-source DPDK component

00:04:49.967 --> 00:04:53.333
that provides
the low latency network capabilities

00:04:53.367 --> 00:04:57.333
but also provides
the BBDEV O-RAN standard interface

00:04:57.333 --> 00:04:59.300
to the
hardware acceleration

00:04:59.300 --> 00:05:01.600
for Forward Error Correction.

00:05:02.333 --> 00:05:06.033
The L1 SDK is a set of
optimized libraries

00:05:06.033 --> 00:05:08.733
for LTE and 5G New Radio,

00:05:08.800 --> 00:05:13.233
or 5G NR,
Layer 1 workload acceleration.

00:05:13.600 --> 00:05:16.900
Let's dig a bit deeper.

00:05:16.900 --> 00:05:19.233
This kit includes APIs,

00:05:19.267 --> 00:05:22.833
source code, and build
and test environment parameters

00:05:22.833 --> 00:05:25.267
that support the
optimized implementations

00:05:25.267 --> 00:05:27.633
of the wireless algorithms.

00:05:28.000 --> 00:05:29.933
As mentioned earlier,

00:05:29.933 --> 00:05:32.333
there is support for
Channel Estimation,

00:05:32.367 --> 00:05:36.533
Equalization, precoding,
and many more.

00:05:36.567 --> 00:05:38.100
For a complete list,

00:05:38.100 --> 00:05:39.900
you will have to look
at the source code.

00:05:39.900 --> 00:05:42.200
The main objective of this library

00:05:42.200 --> 00:05:44.467
is to provide software developers

00:05:44.567 --> 00:05:49.767
a simple API they can use to execute
these wireless algorithms.

00:05:49.767 --> 00:05:53.100
They can then be stitched together
to form a pipeline

00:05:53.133 --> 00:05:55.833
and eventually a complete
physical layer channel

00:05:55.833 --> 00:05:58.067
such as
Physical Uplink Shared Channel

00:05:58.067 --> 00:06:02.667
or Physical Random
Access Channel, or PRACH.

00:06:02.700 --> 00:06:06.000
The performance optimization
is mainly delivered

00:06:06.067 --> 00:06:08.267
through the use of
vector instructions

00:06:08.267 --> 00:06:10.433
such as IntelÂ® AVX-512.

00:06:10.533 --> 00:06:15.233
This allows a single instruction
such as add, multiply,

00:06:15.267 --> 00:06:19.800
or subtract to be executed
on many input data at once.

00:06:19.800 --> 00:06:23.200
You have a software implementation
that uses the instructions

00:06:23.233 --> 00:06:26.400
that are pulled into
easily consumed libraries.

00:06:26.467 --> 00:06:28.600
Customers can take the library

00:06:28.600 --> 00:06:31.000
and use it in their production system

00:06:31.033 --> 00:06:33.067
or investigate the code

00:06:33.067 --> 00:06:36.667
and see how it was optimized
from a plain C-code implementation

00:06:36.667 --> 00:06:39.100
to a vector implementation

00:06:39.100 --> 00:06:42.333
using the Intel AVX-512
instruction set.

00:06:42.333 --> 00:06:46.633
This allows us to achieve
greater performance on a single core

00:06:46.667 --> 00:06:50.400
using the Intel AVX-512
instructions.

00:06:50.500 --> 00:06:55.733
The oneAPI Toolkits are
a supporting tool to the SDK.

00:06:55.900 --> 00:06:57.600
The oneAPI Toolkits

00:06:57.600 --> 00:07:00.100
are available from Intel's website

00:07:00.100 --> 00:07:02.767
and allow developers
to build performant,

00:07:02.800 --> 00:07:06.533
cross-architecture applications
across Intel CPUs.

00:07:06.667 --> 00:07:12.000
The Intel FlexRAN software uses
the oneAPI compiler throughout.

00:07:12.000 --> 00:07:14.567
This gives the FlexRAN
software ecosystem

00:07:14.567 --> 00:07:17.433
access to the latest instruction sets

00:07:17.433 --> 00:07:21.900
and compiler optimizations
for Intel Xeon CPUs.

00:07:21.967 --> 00:07:25.767
There are two toolkits
supported: the Base Toolkit

00:07:25.767 --> 00:07:29.167
and the IoT Toolkit
for legacy support.

00:07:29.767 --> 00:07:35.100
In the next video, we will explore
FlexRAN software more in-depth,

00:07:35.133 --> 00:07:36.667
that makes up the
software Reference Architecture.
