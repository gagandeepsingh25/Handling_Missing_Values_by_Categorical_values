WEBVTT

00:00:01.400 --> 00:00:05.100
Hello and welcome back
to vRAN Software.

00:00:05.133 --> 00:00:07.667
This section covers the open-source

00:00:07.667 --> 00:00:10.500
and commercial
Cloud Native RAN building blocks

00:00:10.500 --> 00:00:13.533
provided by the Open RAN ecosystem

00:00:13.567 --> 00:00:16.167
and Intel's
industry-leading partners.

00:00:16.733 --> 00:00:18.767
So, how do we deploy

00:00:18.800 --> 00:00:22.367
and automate vRAN
for an operator in the network?

00:00:22.400 --> 00:00:26.300
Intel provides a reference
implementation of a vRAN platform

00:00:26.333 --> 00:00:30.367
that contains all the necessary
components to deploy the FlexRAN

00:00:30.400 --> 00:00:32.800
or any other vRAN workload.

00:00:32.800 --> 00:00:35.800
This would include an
optimized Linux kernel

00:00:35.800 --> 00:00:38.000
for real-time deployments;

00:00:38.033 --> 00:00:40.667
work with industry-leading partners

00:00:40.667 --> 00:00:43.800
like Operating System Vendors,
or OSVs,

00:00:43.867 --> 00:00:47.033
Original Equipment Manufacturers,
and more;

00:00:47.033 --> 00:00:49.633
open-source components
for synchronization

00:00:49.633 --> 00:00:51.900
and platform configurations;

00:00:51.900 --> 00:00:55.333
BIOS configuration; Kubernetes
configurations

00:00:55.333 --> 00:00:58.933
and extensions; and DPDK.

00:00:58.967 --> 00:01:02.400
All of these are provided
as a reference implementation

00:01:02.500 --> 00:01:06.767
for Intel Xeon
Scalable processor platforms.

00:01:07.067 --> 00:01:09.000
The operating system is a Linux

00:01:09.000 --> 00:01:12.067
64-bit optimized operating system.

00:01:12.100 --> 00:01:15.300
We work on the infrastructure
side of the OS,

00:01:15.300 --> 00:01:17.367
including the real-time
kernel,

00:01:17.367 --> 00:01:20.167
the driver, and the configuration.

00:01:20.200 --> 00:01:23.767
Intel Select Solutions
for Virtual Radio Access Network

00:01:23.767 --> 00:01:25.400
features solution briefs

00:01:25.400 --> 00:01:28.133
for vRAN
running on operating environments

00:01:28.133 --> 00:01:32.200
from Red Hat, VMware and Wind River.

00:01:32.200 --> 00:01:36.367
We work with these
OSV partners and many more.

00:01:36.767 --> 00:01:38.600
The latest release of FlexRAN

00:01:38.600 --> 00:01:43.167
includes a Docker build script
to create a Docker image.

00:01:43.200 --> 00:01:45.767
The FlexRAN image can now be deployed

00:01:45.767 --> 00:01:48.400
on a Cloud Native Kubernetes
infrastructure,

00:01:48.400 --> 00:01:53.367
making it easier to get set up
and started with a vRAN deployment.

00:01:53.433 --> 00:01:57.167
This Docker image can be scaled
across the different OSVs

00:01:57.200 --> 00:01:59.367
as well as public clouds.

00:01:59.367 --> 00:02:03.200
In order to better support
the automation of the vRAN workloads,

00:02:03.233 --> 00:02:07.133
Intel also creates different
Kubernetes operators to manage

00:02:07.300 --> 00:02:09.767
and orchestrate
the hardware accelerators

00:02:09.767 --> 00:02:12.700
and platforms that are used for vRAN.

00:02:12.733 --> 00:02:15.167
This makes it easier from
an operations perspective,

00:02:15.167 --> 00:02:17.800
for example, D-RAN systems

00:02:17.833 --> 00:02:19.900
include thousands of platforms,

00:02:19.900 --> 00:02:22.233
and they need
automated configuration,

00:02:22.267 --> 00:02:25.400
which can be done using these
Kubernetes operators,

00:02:25.400 --> 00:02:29.067
allowing scaled deployments
of vRAN workloads.

00:02:29.700 --> 00:02:32.733
How do you connect
the reference application

00:02:32.733 --> 00:02:36.533
with the hardware accelerators
and network interfaces?

00:02:36.567 --> 00:02:40.333
The Data Plane Development Kit,
or DPDK,

00:02:40.367 --> 00:02:43.233
is an open-source software project.

00:02:43.267 --> 00:02:45.167
It provides data plane libraries

00:02:45.167 --> 00:02:49.000
as well as network interface
controller polling-mode drivers.

00:02:49.033 --> 00:02:52.000
These polling-mode drivers
are used to offload

00:02:52.000 --> 00:02:56.033
ethernet packet
processing to user space processes.

00:02:56.067 --> 00:02:59.533
The two main
technical advantages of the DPDK

00:02:59.600 --> 00:03:04.433
are higher packet throughput and
higher computing efficiency.

00:03:04.933 --> 00:03:09.600
DPDK is used for
low-latency fronthaul processing.

00:03:09.633 --> 00:03:12.533
We have implemented
an optimized library,

00:03:12.567 --> 00:03:16.167
the xRAN library, on top of DPDK.

00:03:16.200 --> 00:03:19.633
This helps to put packets together
in the right format

00:03:19.667 --> 00:03:24.000
and send them over the low-latency
interface to the network cards.

00:03:24.000 --> 00:03:28.800
DPDK can also be used for Layer
2 and Layer 3.

00:03:28.800 --> 00:03:31.467
DPDK provides the software interface

00:03:31.600 --> 00:03:35.800
for the Intel QuickAssist Technology,
or Intel QAT.

00:03:35.800 --> 00:03:39.167
It also provides an
optimized software implementation

00:03:39.200 --> 00:03:41.800
for the Intel QuickAssist Technology.

00:03:41.800 --> 00:03:46.000
This accelerates IPSec and Packet
Data Convergence Protocol,

00:03:46.000 --> 00:03:50.267
or PDCP, workloads in Layer 3.

00:03:50.333 --> 00:03:52.667
DPDK is also the home

00:03:52.667 --> 00:03:57.833
for the ACC100 user space
drivers under the BBDEV API,

00:03:57.833 --> 00:04:01.867
which has been adopted by O-RAN
as an AAL interface.

00:04:01.933 --> 00:04:06.033
The Low-density Parity-check,
or LDPC, workload,

00:04:06.067 --> 00:04:08.967
which is offloaded to the ACC100,

00:04:09.033 --> 00:04:12.433
is perfectly suited
to hardware accelerators

00:04:12.500 --> 00:04:15.733
as it's a well-defined 3GPP workload

00:04:15.767 --> 00:04:18.467
that does not require
any state information

00:04:18.467 --> 00:04:21.033
and can be easily integrated into

00:04:21.033 --> 00:04:24.233
software-based DU implementations.

00:04:24.267 --> 00:04:27.067
For more on the
Data Plane Development Kit

00:04:27.100 --> 00:04:30.933
watch our course dedicated to DPDK.

00:04:31.233 --> 00:04:34.567
To learn more about how
Intel AVX-512

00:04:34.600 --> 00:04:37.367
can be used to accelerate
packet processing,

00:04:37.367 --> 00:04:39.667
a critical function for vRAN,

00:04:39.700 --> 00:04:43.133
check out this solution
brief on packet processing

00:04:43.233 --> 00:04:47.167
with the
Intel AVX-512 instruction set.

00:04:47.167 --> 00:04:48.467
Thank you for watching

00:04:48.467 --> 00:04:53.100
Virtualized Radio Access Networks
(vRAN) Software.

00:04:53.233 --> 00:04:56.533
For more information on this
or related topics,

00:04:56.567 --> 00:04:57.733
connect with us

00:04:57.767 --> 00:05:00.200
on the
Intel Network Builders website

00:05:00.200 --> 00:05:03.267
or contact an Intel representative.

00:05:03.333 --> 00:05:06.500
Visit Intel's website
for extensive collateral

00:05:06.500 --> 00:05:09.400
on the
FlexRAN Reference Architecture.

00:05:09.433 --> 00:05:12.900
in the Virtualized Radio Access
Networks Hardware course.
